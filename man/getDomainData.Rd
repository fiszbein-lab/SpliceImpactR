% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getDomainData.R
\name{getDomainData}
\alias{getDomainData}
\title{idenitify enriched domains across phenotype}
\usage{
getDomainData(
  fg,
  bg,
  pfg,
  pfam,
  cores = 1,
  output_location = NULL,
  fdr_use = 0.05,
  min_sample_success = 3,
  engine = c("FunFam", "Gene3D", "CDD", "PANTHER", "SMART", "ProSiteProfiles", "Pfam",
    "SUPERFAMILY", "MobiDBLite", "Coils", "PRINTS", "ProSitePatterns", "PIRSF",
    "NCBIfam", "Hamap")[7],
  repeatingDomains = FALSE,
  topViz = 15
)
}
\arguments{
\item{fg}{foreground from getForeground}

\item{bg}{background from getBackground}

\item{pfg}{output from getPaired call}

\item{pfam}{pfam from getPfam}

\item{cores}{the number of cores requested}

\item{output_location}{location to make background directory}

\item{fdr_use}{the fdr to set as a threshold}

\item{min_sample_success}{the number of appearances of a domain in the sample set to visualize}

\item{engine}{pfam only for now}

\item{repeatingDomains}{whether to identify repeating domains being enriched or not}

\item{topViz}{the max number of domains to put in each visualization}
}
\value{
the domain enrichment data and the enrichment plots
}
\description{
idenitify enriched domains across phenotype
}
\examples{

pdir <- system.file("extdata", package="SpliceImpactR")
dataDirectory <- paste0(pdir, "/")
test_group <- paste0(dataDirectory, "rawData/", c("test1","test2", "test3"))
control_group <- paste0(dataDirectory, "rawData/", c("control1", "control2", "control3"))
data_df <- data.frame(
    sample_names = c(control_group, test_group),
    phenotype_names = c(
      rep("control", length(control_group)),
      rep("test", length(test_group))
     ),
   stringsAsFactors = FALSE
  )
data_df$utc <- "control"
data_df$utc[data_df$phenotype_names == unique(data_df$phenotype_names)[2]] <- "test"

transDF <- readr::read_csv(paste0(dataDirectory, "transcripts_limited_transDF.csv"))
c_trans <- readr::read_lines(paste0(dataDirectory, "transcripts_limited_c_trans.csv"))

transcripts_sample <- list(transDF = transDF,
                           c_trans = c_trans)

gtf_sample <- list(gtf = readr::read_csv(paste0(dataDirectory, "gtf_limited.csv")),
            transcript_gtf = readr::read_csv(paste0(dataDirectory, "transcript_gtf_limited.csv")))
translations_sample <- readr::read_lines(paste0(dataDirectory, "translations_limited.csv"))

ip <- readr::read_csv(paste0(dataDirectory, "biomart_ip.csv"))
code_regions <- readr::read_csv(paste0(dataDirectory, "biomart_code_regions.csv"))
pfam_exon_level <- readr::read_csv(paste0(dataDirectory, "biomart_pfam_exon_level.csv"))
fsd_exon_data <- readr::read_csv(paste0(dataDirectory, "biomart_data_sample.csv"))
pfam_data = readr::read_csv(paste0(dataDirectory, "biomart_pfam_exon.csv"))
biomart_data <- list(ip = ip,
                     code_regions = code_regions,
                     fsd_exon_data = fsd_exon_data,
                     pfam_exon_level = pfam_exon_level,
                     pfam_data = pfam_data)

result <- differential_inclusion_HITindex(test_names = test_group,
                                          control_names = control_group,
                                          et = "AFE",
                                          outlier_threshold = "Inf",
                                          minReads = 10,
                                          min_prop_samples = 0,
                                          chosen_method = "qbGLM"
                                          )

fg <- getForeground(input = result,
                            test_names = test_group,
                            control_names = control_group,
                            thresh = .1,
                            fdr = .05,
                            mOverlap = .1,
                            exon_type = "AFE",
                            output_location = NULL,
                            cores = 1,
                            gtf = gtf_sample,
                            max_zero_prop = 1,
                            min_prop_samples = 0,
                            translations = translations_sample)

bg <- getBackground(input=c(test_group, control_group),
                    mOverlap = 0.1,
                    cores = 1,
                    exon_type = "AFE",
                    output_location = NULL, gtf_sample, translations_sample)
library(msa)
pfg <- getPaired(foreground = fg$proBed,
          et = "AFE",
          nucleotides = transcripts_sample,
          newGTF = gtf_sample,
          cores = 1,
          output_location = NULL,
          saveAlignments = FALSE,
          exon_data = biomart_data$fsd_exon_data)

pfamData <- getPfam(background = bg,
                    foreground = fg,
                    pdir,
                    output_location = NULL,
                    cores = 1,
                    biomart_data)

domain_data <- getDomainData(fg,
                             bg,
                             pfg,
                             pfamData,
                             cores = 1,
                             output_location = NULL,
                             fdr_use = .25,
                             min_sample_success = 1,
                             engine = "Pfam",
                             repeatingDomains = FALSE,
                             topViz = 15)
}
