% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_domain_enrichment.R
\name{plot_enriched_domains_counts}
\alias{plot_enriched_domains_counts}
\title{Plot enriched domains by associated event count}
\usage{
plot_enriched_domains_counts(enriched_domains, top_n = 25)
}
\arguments{
\item{enriched_domains}{`data.frame` or `data.table`
Output table from [enrich_domains_hypergeo()], including at least
columns `domain_id` and `events`. Optional columns `padj` and `OR`
are used for coloring and labeling.}

\item{top_n}{Integer (default `25`)
Number of top domains to display, ranked by increasing `padj`.}
}
\value{
A `ggplot` object showing bars of domain counts colored by
  enrichment significance.
}
\description{
Visualizes the top enriched protein domains based on the number of
events contributing to each domain's enrichment, optionally coloring
by –log₁₀ adjusted p-value.
}
\details{
The function expects the output of [enrich_domains_hypergeo()],
typically a `data.table` or `data.frame` containing `domain_id`,
`events`, and optionally `padj` and `OR`.

Each bar corresponds to one domain, with height proportional to the
number of unique `event_id`s contributing to that domain.
Bars are ordered by ascending adjusted p-value (`padj`), and colored
by –log₁₀(padj) if available. When no `padj` column is present,
the bars are shown in a uniform fill color.
}
\examples{
sample_frame <- data.frame(path = c(check_extdata_dir('rawData/control_S5/'),
                                    check_extdata_dir('rawData/control_S6/'),
                                    check_extdata_dir('rawData/control_S7/'),
                                    check_extdata_dir('rawData/control_S8/'),
                                    check_extdata_dir('rawData/case_S1/'),
                                    check_extdata_dir('rawData/case_S2/'),
                                    check_extdata_dir('rawData/case_S3/'),
                                    check_extdata_dir('rawData/case_S4/')),
                           sample_name  = c("S5", "S6", "S7", "S8", "S1", "S2", "S3", "S4"),
                           condition    = c("control", "control", "control", "control", "case",  "case",  "case",  "case"),
                           stringsAsFactors = FALSE)
hit_index <- get_hitindex(sample_frame)
res <- get_differential_inclusion(hit_index)
annotation_df <- get_annotation(load = "test")
matched <- get_matched_events_chunked(res, annotation_df$annotations, chunk_size = 2000)
x_seq <- attach_sequences(matched, annotation_df$sequences)
pairs <- get_pairs(x_seq, source="multi")
seq_compare <-compare_sequence_frame(pairs, annotation_df$annotations)
protein_feature_total <- get_comprehensive_annotations(list(user_df))
annotation_df <- get_annotation(load = 'test')
interpro_features <- get_protein_features(c("interpro"), annotations$annotations, timeout = 600, test = TRUE)
protein_feature_total <- get_comprehensive_annotations(list(interpro_features))

exon_features <- get_exon_features(annotation_df$annotations, protein_feature_total)

hits_domain <- get_domains(seq_compare, exon_features)

bg <- get_background(source = "hit_index",
                     input = sample_frame,
                     annotations = annotation_df$annotations,
                     protein_features = protein_feature_total)
plot_enriched_domains_counts(enriched_domains, top_n = 20)

}
\seealso{
[enrich_domains_hypergeo()], [enrich_by_event()],
  [enrich_by_db()]
}
