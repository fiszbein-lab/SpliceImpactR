% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getTTI.R
\name{getTTI}
\alias{getTTI}
\title{gets the changes in tti interactions}
\usage{
getTTI(
  paired_foreground,
  background,
  steps = 1,
  max_vertices_for_viz = 5000,
  fdr = 0.05,
  ppidm_class = c("Gold", "Silver", "Bronze")[1],
  write_igraphs = FALSE,
  output_location = NULL,
  tti_location = NULL,
  tgp,
  init_edgelist
)
}
\arguments{
\item{paired_foreground}{from getPaired}

\item{background}{proBed from getBackground}

\item{steps}{the number of steps for viz}

\item{max_vertices_for_viz}{max number of vertices to plot, saves time and space}

\item{fdr}{fdr to cut off for geneset enrichment}

\item{ppidm_class}{threshold of ppidm sets to use}

\item{write_igraphs}{bool whether to write the graphs out or not (if large runs, takes up a lot of memory)}

\item{output_location}{location to make output}

\item{tti_location}{if init_tti already performed, location of output or ""}

\item{tgp}{tgp_biomart from setup_gtf output}

\item{init_edgelist}{the edgelist out of initTTI if not using saved location}
}
\value{
differences between each tti pair and the overall results
}
\description{
gets the changes in tti interactions
}
\examples{

pdir <- system.file("extdata", package="SpliceImpactR")
dataDirectory <- paste0(pdir, "/")
test_group <- paste0(dataDirectory, "rawData/", c("test1","test2", "test3"))
control_group <- paste0(dataDirectory, "rawData/", c("control1", "control2", "control3"))
data_df <- data.frame(
    sample_names = c(control_group, test_group),
    phenotype_names = c(
      rep("control", length(control_group)),
      rep("test", length(test_group))
     ),
   stringsAsFactors = FALSE
  )
data_df$utc <- "control"
data_df$utc[data_df$phenotype_names == unique(data_df$phenotype_names)[2]] <- "test"

transDF <- readr::read_csv(paste0(dataDirectory, "transcripts_limited_transDF.csv"))
c_trans <- readr::read_lines(paste0(dataDirectory, "transcripts_limited_c_trans.csv"))

transcripts_sample <- list(transDF = transDF,
                           c_trans = c_trans)

gtf_sample <- list(gtf = readr::read_csv(paste0(dataDirectory, "gtf_limited.csv")),
            transcript_gtf = readr::read_csv(paste0(dataDirectory, "transcript_gtf_limited.csv")),
            tgp_biomart = readr::read_csv(paste0(dataDirectory, "tgp_biomart_limited"))
            )
translations_sample <- readr::read_lines(paste0(dataDirectory, "translations_limited.csv"))

ip <- readr::read_csv(paste0(dataDirectory, "biomart_ip.csv"))
code_regions <- readr::read_csv(paste0(dataDirectory, "biomart_code_regions.csv"))
pfam_exon_level <- readr::read_csv(paste0(dataDirectory, "biomart_pfam_exon_level.csv"))
fsd_exon_data <- readr::read_csv(paste0(dataDirectory, "biomart_data_sample.csv"))
pfam_data = readr::read_csv(paste0(dataDirectory, "biomart_pfam_exon.csv"))
biomart_data_sample <- list(ip = ip,
                     code_regions = code_regions,
                     fsd_exon_data = fsd_exon_data,
                     pfam_exon_level = pfam_exon_level,
                     pfam_data = pfam_data)


result <- differential_inclusion_HITindex(test_names = test_group,
                                          control_names = control_group,
                                          et = "AFE",
                                          outlier_threshold = "Inf",
                                          minReads = 10,
                                          min_prop_samples = 0,
                                          chosen_method = "qbGLM"
                                          )

fg <- getForeground(input = result,
                            test_names = test_group,
                            control_names = control_group,
                            thresh = .1,
                            fdr = .05,
                            mOverlap = .1,
                            exon_type = "AFE",
                            output_location = NULL,
                            cores = 1,
                            gtf = gtf_sample,
                            max_zero_prop = 1,
                            min_prop_samples = 0,
                            translations = translations_sample)

bg <- getBackground(input=c(test_group, control_group),
                    mOverlap = 0.1,
                    cores = 1,
                    exon_type = "AFE",
                    output_location = NULL, gtf_sample, translations_sample)
library(msa)
pfg <- getPaired(foreground = fg$proBed,
          et = "AFE",
          nucleotides = transcripts_sample,
          newGTF = gtf_sample,
          cores = 1,
          output_location = NULL,
          saveAlignments = FALSE,
          exon_data = biomart_data_sample$fsd_exon_data)

pfamData <- getPfam(background = bg,
                    foreground = fg,
                    pdir,
                    output_location = NULL,
                    cores = 1,
                    biomart_data_sample)

domain_data <- getDomainData(fg,
                             bg,
                             pfg,
                             pfamData,
                             cores = 1,
                             output_location = NULL,
                             fdr_use = .25,
                             min_sample_success = 1,
                             engine = "Pfam",
                             repeatingDomains = FALSE,
                             topViz = 15)

initDDI <- init_ddi(pdir = dataDirectory,
                    output_location = NULL,
                    ppidm_class = c("Gold_Standard", "Gold", "Silver", "Bronze")[1],
                    removeDups = TRUE,
                    cores = 1,
                    pfam_data = biomart_data_sample$pfam_data)

tti <- getTTI(paired_foreground = pfg$paired_proBed,
              background = bg$proBed,
              steps = 1,
              max_vertices_for_viz = 300,
              fdr = .05,
              ppidm_class = c("Gold", "Silver", "Bronze")[1],
              write_igraphs = FALSE,
              output_location = NULL,
              tti_location = NULL,
              tgp = gtf_sample$tgp_biomart,
              init_edgelist = initDDI$edgelist)
}
