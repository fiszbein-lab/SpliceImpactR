% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_annotation_matches.R
\name{attach_sequences}
\alias{attach_sequences}
\title{Attach transcript and protein sequences to an event or annotation table}
\usage{
attach_sequences(x, sequences)
}
\arguments{
\item{x}{A data.frame or data.table containing a \code{transcript_id} column.}

\item{sequences}{A data.frame or data.table with at least the columns:
\code{transcript_id}, \code{protein_id}, \code{transcript_seq},
and \code{protein_seq}.}
}
\value{
A \link[data.table]{data.table} with the same rows as \code{x} and
  appended sequence columns (\code{transcript_seq}, \code{protein_seq}, etc.).
}
\description{
Merges sequence data (transcript and protein sequences) onto an input table
of splicing events or transcript annotations, by matching on
\code{transcript_id}. When multiple sequences share the same
\code{transcript_id}, the function keeps the entry with a non-missing
\code{protein_id} and the longest \code{protein_seq}.
}
\details{
The join is left-sided: all rows from \code{x} are preserved.
  Duplicate \code{transcript_id}s in \code{sequences} are resolved internally
  based on protein presence and sequence length.
}
\examples{
sample_frame <- data.frame(path = c(check_extdata_dir('rawData/control_S5/'),
                                    check_extdata_dir('rawData/control_S6/'),
                                    check_extdata_dir('rawData/control_S7/'),
                                    check_extdata_dir('rawData/control_S8/'),
                                    check_extdata_dir('rawData/case_S1/'),
                                    check_extdata_dir('rawData/case_S2/'),
                                    check_extdata_dir('rawData/case_S3/'),
                                    check_extdata_dir('rawData/case_S4/')),
                           sample_name  = c("S5", "S6", "S7", "S8", "S1", "S2", "S3", "S4"),
                           condition    = c("control", "control", "control", "control", "case",  "case",  "case",  "case"),
                           stringsAsFactors = FALSE)
hit_index <- get_hitindex(sample_frame)
res <- get_differential_inclusion(hit_index)
annots <- get_annotation(load = "test")
matched <- get_matched_events_chunked(res, annots$annotations, chunk_size = 2000)
x_seq <- attach_sequences(x, annots$sequences)
}
