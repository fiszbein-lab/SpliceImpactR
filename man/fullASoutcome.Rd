% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fullASoutcome.R
\name{fullASoutcome}
\alias{fullASoutcome}
\title{Perform full analysis on various alternative RNA processing events}
\usage{
fullASoutcome(
  as_types = c("AFE", "ALE", "HFE", "HLE", "SE", "MXE", "RI", "A5SS", "A3SS", "HIT"),
  output_directory,
  data_directory,
  data_df,
  outlier_handle = "Inf",
  cutoff = 0.1,
  cores = 1,
  bg_pre = NA,
  tti_location = NULL,
  initTTI = NULL,
  mOverlap = 0.05,
  s_gtf,
  plotAlignments = FALSE,
  transcripts,
  translations,
  biomart_data,
  max_zero_prop = 0.5,
  min_prop_samples = 0.5,
  chosen_method = "nbGLM"
)
}
\arguments{
\item{as_types}{a vector of the type of alternative splicing events that are being investigated}

\item{output_directory}{the path (ending with '/') that the output is desired}

\item{data_directory}{the path to the data, in the format specified by organizeSamples}

\item{data_df}{data frame containing one column of the control_group and test_group (sample_names) and one column of phenotype names (phenotype_names)}

\item{outlier_handle}{value to threshold the outlier detection}

\item{cutoff}{diInclusion cutoff to use to identify significance}

\item{cores}{number of cores to allocate}

\item{bg_pre}{if bg was made earlier, param to give premade bg}

\item{tti_location}{location of previously made transcript-transcript interactions network}

\item{initTTI}{the edge list from initTTI}

\item{mOverlap}{minimum overlap to call an exon as matched to annotation}

\item{s_gtf}{output from getAnnotation}

\item{plotAlignments}{whether to plot alignments from getPaired/matchAlignType}

\item{transcripts}{from getTranscripts}

\item{translations}{from getTranslations}

\item{biomart_data}{from setupBiomart}

\item{max_zero_prop}{max prop of samples that can be 0}

\item{min_prop_samples}{min prop of samples from each phenotype required to show a specific event}

\item{chosen_method}{choice of staistical model (qbGLM, nbGLM, zinbGLM, wilcox)}
}
\value{
nothing in R, output to the output_directory
}
\description{
Perform full analysis on various alternative RNA processing events
}
\examples{
pdir <- system.file("extdata", package="SpliceImpactR")
dataDirectory <- paste0(pdir, "/")
test_group <- paste0(dataDirectory, "rawData/", c("test1","test2", "test3"))
control_group <- paste0(dataDirectory, "rawData/", c("control1", "control2", "control3"))
data_df <- data.frame(
    sample_names = c(control_group, test_group),
    phenotype_names = c(
      rep("control", length(control_group)),
      rep("test", length(test_group))
     ),
   stringsAsFactors = FALSE
  )

transDF <- readr::read_csv(paste0(dataDirectory, "transcripts_limited_transDF.csv"))
c_trans <- readr::read_lines(paste0(dataDirectory, "transcripts_limited_c_trans.csv"))

transcripts_sample <- list(transDF = transDF,
                           c_trans = c_trans)

gtf_sample <- list(gtf = readr::read_csv(paste0(dataDirectory, "gtf_limited.csv")),
            transcript_gtf = readr::read_csv(paste0(dataDirectory, "transcript_gtf_limited.csv")),
            tgp_biomart = readr::read_csv(paste0(dataDirectory, "tgp_biomart_limited"))
            )
translations_sample <- readr::read_lines(paste0(dataDirectory, "translations_limited.csv"))

ip <- readr::read_csv(paste0(dataDirectory, "biomart_ip.csv"))
code_regions <- readr::read_csv(paste0(dataDirectory, "biomart_code_regions.csv"))
pfam_exon_level <- readr::read_csv(paste0(dataDirectory, "biomart_pfam_exon_level.csv"))
fsd_exon_data <- readr::read_csv(paste0(dataDirectory, "biomart_data_sample.csv"))
pfam_data = readr::read_csv(paste0(dataDirectory, "biomart_pfam_exon.csv"))

biomart_data_sample <- list(ip = ip,
                     code_regions = code_regions,
                     fsd_exon_data = fsd_exon_data,
                     pfam_exon_level = pfam_exon_level,
                     pfam_data = pfam_data)

twoASfullRun <- fullASoutcome(as_types = c("AFE", "SE", "HIT"),
                              output_directory = NULL,
                              data_directory = dataDirectory,
                              data_df,
                              outlier_handle = "Inf",
                              cutoff = .1,
                              cores = 1,
                              bg_pre = NA,
                              tti_location = NULL,
                              initTTI = NULL,
                              mOverlap = .05,
                              s_gtf = gtf_sample,
                              plotAlignments = FALSE,
                              transcripts = transcripts_sample,
                              translations = translations_sample,
                              biomart_data = biomart_data_sample,
                              max_zero_prop = 1,
                              min_prop_samples = 0,
                              chosen_method = 'qbGLM')




}
