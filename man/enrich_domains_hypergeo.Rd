% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_domain_enrichment.R
\name{enrich_domains_hypergeo}
\alias{enrich_domains_hypergeo}
\title{Domain-level enrichment via hypergeometric test}
\usage{
enrich_domains_hypergeo(
  hits,
  background,
  domain_col_fg = "either_domains_list",
  domain_col_bg = "total_sd_domains",
  event_col = "event_type_inc",
  event_filter = NULL,
  db_filter = NULL,
  min_fg_count = 2,
  delim = "[,;|[:space:]]+"
)
}
\arguments{
\item{hits}{`data.frame` or `data.table` containing the foreground
transcript pairs (typically the significant inclusion/exclusion
events). Must include a list column of domain IDs (default:
`"either_domains_list"`).}

\item{background}{`data.frame` or `data.table` representing the
matched background pairs. Must include a list column of domain
IDs (default: `"total_sd_domains"`).}

\item{domain_col_fg}{Name of the domain list column in `hits`.}

\item{domain_col_bg}{Name of the domain list column in `background`.}

\item{event_col}{Name of the column giving event type (default:
`"event_type_inc"`). Set `NULL` to skip event filtering.}

\item{event_filter}{Character vector of event types to include
(e.g. `"A5SS"`, `"A3SS"`). If `NULL`, all events are used.}

\item{db_filter}{Character vector of database prefixes to retain
(e.g. `"Pfam"`, `"SMART"`). If `NULL`, all domains are used.}

\item{min_fg_count}{Minimum number of foreground hits required to
test a domain (default `2`).}

\item{delim}{Regular expression describing the delimiters in string
list columns (default `[,;|[:space:]]+`).}
}
\value{
A `data.table` with one row per domain, including:
\describe{
  \item{`domain_id`}{Domain identifier (database prefix removed).}
  \item{`db`}{Database prefix (e.g. `"Pfam"`).}
  \item{`k`, `K`}{Foreground domain count and total foreground pairs.}
  \item{`M`, `B`}{Background domain count and total background pairs.}
  \item{`fg_prop`, `bg_prop`}{Proportion of pairs with the domain.}
  \item{`OR`}{Odds ratio (Haldane–Anscombe corrected).}
  \item{`pval`, `padj`}{Raw and BH-adjusted p-values.}
  \item{`events`}{Event IDs contributing to the domain count.}
}
}
\description{
Tests whether particular protein domains are overrepresented among
inclusion/exclusion transcript pairs (foreground) relative to a
matched background set, using the hypergeometric test.
}
\details{
Each domain identifier is counted once per transcript pair based on
its presence in a list column (e.g. `either_domains_list`). The
probability of observing at least `k` such pairs is computed under
the hypergeometric distribution
\deqn{P(X \ge k), \quad X \sim \mathrm{Hypergeom}(M, B-M, K)}
where:
\itemize{
  \item \code{K} = number of foreground pairs,
  \item \code{B} = number of background pairs,
  \item \code{M} = background count of pairs containing the domain,
  \item \code{k} = foreground count of pairs containing the domain.
}
P-values are Benjamini–Hochberg adjusted (`padj`).

Optionally, analyses can be restricted by event type or database
prefix (e.g. `"Pfam"`, `"SMART"`) and domains with fewer than
`min_fg_count` foreground occurrences are skipped.
}
\examples{
sample_frame <- data.frame(path = c(check_extdata_dir('rawData/control_S5/'),
                                    check_extdata_dir('rawData/control_S6/'),
                                    check_extdata_dir('rawData/control_S7/'),
                                    check_extdata_dir('rawData/control_S8/'),
                                    check_extdata_dir('rawData/case_S1/'),
                                    check_extdata_dir('rawData/case_S2/'),
                                    check_extdata_dir('rawData/case_S3/'),
                                    check_extdata_dir('rawData/case_S4/')),
                           sample_name  = c("S5", "S6", "S7", "S8", "S1", "S2", "S3", "S4"),
                           condition    = c("control", "control", "control", "control", "case",  "case",  "case",  "case"),
                           stringsAsFactors = FALSE)
hit_index <- get_hitindex(sample_frame)
res <- get_differential_inclusion(hit_index)
annotation_df <- get_annotation(load = "test")
matched <- get_matched_events_chunked(res, annotation_df$annotations, chunk_size = 2000)
x_seq <- attach_sequences(matched, annotation_df$sequences)
pairs <- get_pairs(x_seq, source="multi")
seq_compare <-compare_sequence_frame(pairs, annotation_df$annotations)
protein_feature_total <- get_comprehensive_annotations(list(user_df))
annotation_df <- get_annotation(load = 'test')
interpro_features <- get_protein_features(c("interpro"), annotations$annotations, timeout = 600, test = TRUE)
protein_feature_total <- get_comprehensive_annotations(list(interpro_features))

exon_features <- get_exon_features(annotation_df$annotations, protein_feature_total)

hits_domain <- get_domains(seq_compare, exon_features)

bg <- get_background(source = "hit_index",
                     input = sample_frame,
                     annotations = annotation_df$annotations,
                     protein_features = protein_feature_total)

enriched_domains <- enrich_domains_hypergeo(hits_domain, bg, db_filter = 'interpro')

}
\seealso{
* [enrich_by_event()] — run per event type
* [enrich_by_db()] — run per database
* [add_domain_columns()] — attach domain lists to hits
}
