% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_multi_analysis.R
\name{get_enrichment}
\alias{get_enrichment}
\title{Gene Set Enrichment for Splicing-Linked Gene Lists}
\usage{
get_enrichment(
  foreground,
  background = NULL,
  species = c("human", "mouse"),
  gene_id_type = c("symbol", "ensembl"),
  sources = c("GO:BP", "GO:MF", "GO:CC", "MSigDB:H", "MSigDB:C2:CP:REACTOME", "Reactome"),
  min_size = 10,
  max_size = 2000,
  p_adjust_cutoff = 0.05,
  simplify_go = TRUE,
  top_n_plot = 20,
  plot_type = c("dot", "bar")
)
}
\arguments{
\item{foreground}{Character vector of gene IDs (symbols or Ensembl IDs).}

\item{background}{Optional character vector of background genes
(universe). If `NULL`, all genes present in annotation collections are used.}

\item{species}{Species for enrichment catalog (`"human"` or `"mouse"`).}

\item{gene_id_type}{Type of input gene IDs (`"symbol"` or `"ensembl"`).}

\item{sources}{Character vector selecting enrichment sources.
Example options include:
\itemize{
  \item `"GO:BP"`, `"GO:MF"`, `"GO:CC"`
  \item `"MSigDB:H"`, `"MSigDB:C2:CP:REACTOME"`
  \item `"Reactome"`
}}

\item{min_size}{Minimum term size (default `10`).}

\item{max_size}{Maximum term size (default `2000`).}

\item{p_adjust_cutoff}{FDR cutoff for reporting significant terms.}

\item{simplify_go}{Whether to apply GO term redundancy reduction.}

\item{top_n_plot}{Number of terms to visualize in the quick plot.}

\item{plot_type}{`"dot"` (default) or `"bar"`.}
}
\value{
A list with:
\describe{
  \item{results_per_source}{List of enrichment result tables per source}
  \item{results_combined}{Combined enrichment table}
  \item{results_signif}{Filtered table by FDR cutoff}
  \item{plot}{A `ggplot2` object visualizing top terms}
}
}
\description{
Perform over-representation analysis for a foreground gene set, optionally
against a background universe, using GO, MSigDB, and Reactome categories.
}
\details{
This is a convenience wrapper around `clusterProfiler`, `msigdbr`, and
optionally `ReactomePA`, producing a combined enrichment table and a quick
visualization of top significant terms.


Input genes are internally mapped to Entrez IDs. Enrichment tests are performed using:

* `clusterProfiler::enrichGO`
* `clusterProfiler::enricher` (MSigDB)
* `ReactomePA::enrichPathway` (optional)
}
\note{
Requires these packages installed:
`clusterProfiler`, `msigdbr`, `data.table`, `AnnotationDbi`, `ggplot2`,
and `org.Hs.eg.db` or `org.Mm.eg.db`. For Reactome analysis you must also
install `ReactomePA`.
}
\examples{
sample_frame <- data.frame(path = c(check_extdata_dir('rawData/control_S5/'),
                                    check_extdata_dir('rawData/control_S6/'),
                                    check_extdata_dir('rawData/control_S7/'),
                                    check_extdata_dir('rawData/control_S8/'),
                                    check_extdata_dir('rawData/case_S1/'),
                                    check_extdata_dir('rawData/case_S2/'),
                                    check_extdata_dir('rawData/case_S3/'),
                                    check_extdata_dir('rawData/case_S4/')),
                           sample_name  = c("S5", "S6", "S7", "S8", "S1", "S2", "S3", "S4"),
                           condition    = c("control", "control", "control", "control", "case",  "case",  "case",  "case"),
                           stringsAsFactors = FALSE)
hit_index <- get_hitindex(sample_frame)
res <- get_differential_inclusion(hit_index)

annotation_df <- get_annotation(load = "test")
interpro_features <- get_protein_features(c("interpro"), annotations$annotations, timeout = 600, test = TRUE)
protein_feature_total <- get_comprehensive_annotations(list(interpro_features))

exon_features <- get_exon_features(annotation_df$annotations, protein_feature_total)

hits_domain <- get_domains(seq_compare, exon_features)

bg <- get_background(source = "hit_index",
                     input = sample_frame,
                     annotations = annotation_df$annotations,
                     protein_features = protein_feature_total)
enrichment <- get_enrichment(res$gene_id, bg$gene_id, species = 'human', 'ensembl', 'MSigDB:H')
}
