% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_domains.R
\name{get_domains}
\alias{get_domains}
\title{Add protein domain annotations to splicing events}
\usage{
get_domains(hits, exon_features, show_protein_domains = FALSE)
}
\arguments{
\item{hits}{`data.frame` or `data.table` containing transcript pairs with
at least `transcript_id_inc`, `transcript_id_exc`, `exons_inc`,
`exons_exc`, and `event_type_inc` (or `event_type_exc`).}

\item{exon_features}{`data.frame` of exon–domain annotations with columns
`ensembl_transcript_id`, `ensembl_peptide_id`, `exon_id`, `database`,
`feature_id`, `name`, `overlap_aa_start`, `overlap_aa_end`.}

\item{show_protein_domains}{Logical; if `TRUE`, include full protein-level
domain sets (`domains_protein_inc` / `domains_protein_exc`).}
}
\value{
The input `hits` table with added columns:
\itemize{
  \item `domains_exons_inc`, `domains_exons_exc` — domains found on event exons
  \item `inc_only_domains`, `exc_only_domains` — domains unique to each isoform
  \item `inc_only_domains_list`, `exc_only_domains_list`, `either_domains_list` — list-columns
  \item `inc_only_n`, `exc_only_n`, `diff_n` — domain counts
  \item optionally, `domains_protein_inc` / `domains_protein_exc`
}
}
\description{
Annotates each splicing event with protein domains that are gained,
lost, or uniquely present in inclusion or exclusion isoforms.
}
\details{
Internally, this function builds a domain lookup table from an exon–feature
annotation (e.g. InterPro, Pfam) and extracts per-exon and per-transcript
domain lists for each isoform in `hits`. Differences between the inclusion
(`*_inc`) and exclusion (`*_exc`) isoforms are then summarized as:

* `inc_only_domains`: domains unique to the inclusion isoform
* `exc_only_domains`: domains unique to the exclusion isoform
* `diff_n`: total number of non-shared domains

If `show_protein_domains = TRUE`, additional columns report full domain
sets across the entire inclusion/exclusion proteins.
}
\examples{
sample_frame <- data.frame(path = c(check_extdata_dir('rawData/control_S5/'),
                                    check_extdata_dir('rawData/control_S6/'),
                                    check_extdata_dir('rawData/control_S7/'),
                                    check_extdata_dir('rawData/control_S8/'),
                                    check_extdata_dir('rawData/case_S1/'),
                                    check_extdata_dir('rawData/case_S2/'),
                                    check_extdata_dir('rawData/case_S3/'),
                                    check_extdata_dir('rawData/case_S4/')),
                           sample_name  = c("S5", "S6", "S7", "S8", "S1", "S2", "S3", "S4"),
                           condition    = c("control", "control", "control", "control", "case",  "case",  "case",  "case"),
                           stringsAsFactors = FALSE)
hit_index <- get_hitindex(sample_frame)
res <- get_differential_inclusion(hit_index)
annotation_df <- get_annotation(load = "test")
matched <- get_matched_events_chunked(res, annotation_df$annotations, chunk_size = 2000)
x_seq <- attach_sequences(matched, annotation_df$sequences)
pairs <- get_pairs(x_seq, source="multi")
seq_compare <-compare_sequence_frame(pairs, annotation_df$annotations)
interpro_features <- get_protein_features(c("interpro"), annotations$annotations, timeout = 600, test = TRUE)
protein_feature_total <- get_comprehensive_annotations(list(interpro_features))

exon_features <- get_exon_features(annotation_df$annotations, protein_feature_total)

hits_domain <- get_domains(seq_compare, exon_features)

}
\seealso{
Internal helpers:
* [build_domain_lookup()] — builds per-exon / per-transcript domain tables
* [domains_on_exons()] — extract domains on a given exon set
* [domains_on_protein()] — extract domains on a full transcript
* [collapse_domains()] — canonicalize domain vectors
}
